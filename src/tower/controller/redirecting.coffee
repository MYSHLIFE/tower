Tower.Controller.Redirecting =  
  # Redirects the browser to the target specified in +options+. This parameter can take one of three forms:
  #
  # * <tt>Hash</tt> - The URL will be generated by calling urlFor with the +options+.
  # * <tt>Record</tt> - The URL will be generated by calling urlFor with the +options+, which will reference a named URL for that record.
  # * <tt>String</tt> starting with <tt>protocol://</tt> (like <tt>http://</tt>) - Is passed straight through as the target for redirection.
  # * <tt>String</tt> not containing a protocol - The current protocol and host is prepended to the string.
  # * <tt>Proc</tt> - A block that will be executed in the controller's context. Should return any option accepted by +redirectTo+.
  # * <tt>:back</tt> - Back to the page that issued the request. Useful for forms that are triggered from multiple places.
  #   Short-hand for <tt>redirectTo(request.env["HTTP_REFERER"])</tt>
  #
  # Examples:
  #   redirectTo action: "show", id: 5
  #   redirectTo post
  #   redirectTo "http://www.rubyonrails.org"
  #   redirectTo "/images/screenshot.jpg"
  #   redirectTo articlesUrl()
  #   redirectTo => editPostUrl(@post)
  #
  # The redirection happens as a "302 Moved" header unless otherwise specified.
  #
  # Examples:
  #   redirectTo postUrl(@post), :status => :found
  #   redirectTo action: 'atom', status: "movedPermanently"
  #   redirectTo postUrl(@post), :status => 301
  #   redirectTo :action=>'atom', :status => 302
  #
  # The status code can either be a standard {HTTP Status code}[http://www.iana.org/assignments/http-status-codes] as an
  # integer, or a symbol representing the downcased, underscored and symbolized description.
  # Note that the status code must be a 3xx HTTP code, or redirection will not occur.
  #
  # It is also possible to assign a flash message as part of the redirection. There are two special accessors for the commonly used flash names
  # +alert+ and +notice+ as well as a general purpose +flash+ bucket.
  #
  # Examples:
  #   redirectTo postUrl(@post), :alert => "Watch it, mister!"
  #   redirectTo postUrl(@post), :status=> :found, :notice => "Pay attention to the road"
  #   redirectTo postUrl(@post), :status => 301, :flash => { :updatedPostId => @post.id }
  #   redirectTo { :action=>'atom' }, :alert => "Something serious happened"
  #
  # When using <tt>redirectTo :back</tt>, if there is no referrer, RedirectBackError will be raised. You may specify some fallback
  # behavior for this case by rescuing RedirectBackError.
  redirectTo: ->
    @redirect arguments...
    
  redirect: ->
    @response.redirect arguments...
    
module.exports = Tower.Controller.Redirecting
