require('design.io').extension('watchfile')

async = require('async')
File  = require('pathfinder').File
mint  = require('mint')

require("design.io-stylesheets") /(app\/client|lib\/stylesheets|vendor\/stylesheets)/
  compress: false
  debug:    false
  ignore:   /(public|node_modules)/
  paths:    ["./app/client/stylesheets", "./vendor/stylesheets/bootstrap"]
  outputPath: (path) ->
    "public/stylesheets/#{path}".replace(/\.(sass|scss|stylus|styl|less|css)/, ".css")

require("design.io-javascripts")
  compress: false
  debug:    false
  ignore:   /(public|node_modules|server|app\/views|config)/
  outputPath: (path) ->
    "public/javascripts/#{path}".replace(/\.(js|coffee)/, ".js")

# client config
require("design.io-javascripts") /(config\/locales\/.*|config\/(?:application|routes|assets)|app\/client\/config\/.*)\.(js|coffee)$/
  compress: false
  debug:    false
  ignore:   /(public|node_modules)/
  outputPath: (path) ->
    "public/javascripts/#{path}".replace(/\.(js|coffee)/, ".js")

coffeecup = require('coffeecup')

require('tower')

Tower.Application.instance().initialize()

watch /app\/views.*\.coffee$/
  update: (path, callback) ->
    try
      nodes = path.replace("app/views/", "").split("/")
      name  = {}

      data  = File.read(path)
      id    = nodes.join("/")
      selector = id
      name  = ""
      
      #@broadcast body: data, id: id, selector: selector, path: "/#{name}"
      
      files   = File.files("app/views")
      result  = []
      
      for file in files
        continue unless file.match(/app\/views\/.+\.coffee$/)
        continue unless file.match(/\.coffee$/)
        result.push [file.replace(/\.coffee$/, ""), File.read(file)]
        
      template      = "Tower.View.cache =\n"
      
      iterator = (item, next) =>
        name = item[0].replace(/app\/(?:client\/)views\//, '')#.replace('/', '_')
        try
          string = coffeecup.render(item[1])  
        catch error
          try
            view = new Tower.View
            opts = type: 'coffee', inline: true, template: item[1]
            cb = (error, body) =>
              string = body
            view.render(opts, cb)
          catch error
            console.log item[0], error
            return next() # so we can still have some templates

        template += "  '#{name}': Ember.Handlebars.compile('"
        # make it render to HTML for ember
        template += "#{string}')\n"
        next()
        
      async.forEachSeries result, iterator, (error) =>
        template += '_.extend(Ember.TEMPLATES, Tower.View.cache)\n'
        mint.coffee template, bare: true, (error, string) =>
          if error
            console.log error
            return callback(error)
          else
            File.write "public/javascripts/app/views/templates.js", string
            callback()
        
    catch error
      callback(error)
    
  client:
    update: (data) ->
      Tower.View.cache ||= {}
      Tower.View.cache[data.id] = Ember.TEMPLATES[data.id] = data
      ###
      if data.reload
        window.location = data.path
      else
        Tower.get data.path
      ###